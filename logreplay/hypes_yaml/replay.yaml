root_dir: '/koko/OPV2V/train'
output_dir: '/koko/OPV2V/temporal_dump/train'
map: # corresponding to bev map
  activate: true
  visualize: false
  use_lidar_center: false

  save_yml: false
  save_static: false
  save_lane: false
  save_road_dynamic: false
  save_dynamic: false
  save_bev_vis: false
  save_bev_sem: false

  radius: 50 # meter
  raster_size: [500, 500]
  lane_sample_resolution: 0.1

  static:
    draw_lane: true
    draw_traffic_light: false
    exclude_road: false
    exclude_intersection_lane: false
    z_filter_value: 8
    other_objs: [] # besides, lane and road, what other objects need to render, 'terrain', 'building','sidewalk'
  dynamic:
    exclude_self: true
    exclude_off_road: true
    visibility: false # whether save visibility mask under ego coordinate. when set to true, semantic lidar has to be implemented
    visibility_corp: false # whether save visibility mask that can be seen for all cavs. when set to true, semantic lidar has to be implemented

sensor: # new attached sensor
  sensor_list:
    - name: 'semantic_lidar'
      args:
        upper_fov: 2
        lower_fov: -25
        channels: 64
        rotation_frequency: 20
        points_per_second: 1300000
        range: 120
        relative_pose: center
        thresh: 5 # mininum number of points hit to be regarded as visible
#    - name: 'lidar'
#      args:
#        channels: 64
#        dropoff_general_rate: 0.1
#        dropoff_intensity_limit: 0.7
#        dropoff_zero_intensity: 0.15
#        lower_fov: -25
#        noise_stddev: 0.02
#        points_per_second: 1300000
#        range: 120
#        rotation_frequency: 20
#        upper_fov: 2
#        relative_pose: center
#    - name: 'semantic_lidar'
#      args: &base_semantic_lidar
#        upper_fov: 10
#        lower_fov: -30
#        channels: 32
#        rotation_frequency: 20
#        points_per_second: 250000
#        range: 50
#        relative_pose: front
#        thresh: 5 # mininum number of points hit to be regarded as visible
#    - name: 'semantic_lidar'
#      args:
#        <<: *base_semantic_lidar
#        relative_pose: left
#    - name: 'semantic_lidar'
#      args:
#        <<: *base_semantic_lidar
#        relative_pose: right
#    - name: 'semantic_lidar'
#      args:
#        <<: *base_semantic_lidar
#        relative_pose: back
#    - name: 'bev_semantic_camera'
#      args:
#        visualize: true
#        fov: 45
#        image_size_x: 512
#        image_size_y: 512
#        height: 115.88